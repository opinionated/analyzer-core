// xmlparse.go

//-----------------------------------------------KEYWORD EX.
// <?xml version="1.0" encoding="UTF-8"?>
// <results>
//     <status>OK</status>
//     <usage>By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html</usage>
//     <totalTransactions>1</totalTransactions>
//     <language>english</language>
//     <keywords>
//         <keyword>
//             <relevance>0.900147</relevance>
//             <text>marriage licenses</text>
//         </keyword>
//         <keyword>
//             <relevance>0.776618</relevance>
//             <text>Jail Kim Davis</text>
//         </keyword>
//     </keywords>
// </results>

//-----------------------------------------------TAXONOMY EX.
// <?xml version="1.0" encoding="UTF-8"?>
// <results>
//     <status>OK</status>
//     <usage>By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html</usage>
//     <totalTransactions>1</totalTransactions>
//     <language>english</language>
//     <taxonomy>
//         <element>
//             <label>/society/social institution/marriage</label>
//             <score>0.516184</score>
//         </element>
//         <element>
//             <label>/law, govt and politics/law enforcement/police</label>
//             <score>0.448675</score>
//         </element>
//         <element>
//             <confident>no</confident>
//             <label>/religion and spirituality/atheism and agnosticism</label>
//             <score>0.266534</score>
//         </element>
//     </taxonomy>
// </results>

package main

import (
	"encoding/xml"
	"fmt"
	"os"
	"io/ioutil"
)

type XMLKeyword struct {
	Relevance	float32	`xml:"relevance"`
	Text 		string `xml:"text"`
}
type XMLKeywords struct {
	Keywords	[]XMLKeyword `xml:"keyword"`
}
type Keywords struct {
	K	XMLKeywords `xml:"keywords"`
}


func main() {
	v := Keywords{}
    filepath := "testkeyword.xml"

    // Open the xml file
    file, err := os.Open(filepath)
    if err != nil {
        panic(err)
    }

    defer file.Close()

	data, _ := ioutil.ReadAll(file)

	errr := xml.Unmarshal([]byte(data), &v)
	if errr != nil {
		fmt.Printf("error: %v", err)
		return
	}
	fmt.Println(v.K.Keywords[1].Text)

}
